AWSTemplateFormatVersion: 2010-09-09
Description: VPC setup cloud formation template
Parameters:
  NumberOfAZs:
    Description: How many availability zones do you wish to create
    Type: Number
    AllowedValues:
      - 1
      - 2
    Default: 2
  PrivateSubNets:
    Description: Do you need private subnets
    Type: String
    AllowedValues:
      - True
      - False
    Default: True
Conditions:
  BuildPublic2: !Equals [ !Ref NumberOfAZs, 2] #both conditions achieve the same
  BuildPrivateSubnets: !Equals [ !Ref PrivateSubNets, True]
  BuildPrivate2: !And [!Not [ !Equals [ !Ref NumberOfAZs, 2 ]], !Equals [ !Ref PrivateSubNets, True]]  #both conditions achieve the same
Resources: 
#VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-VPC"]] #if our stackname is MyVPC this will create Name as MyVPC-VPC
#Internet Gateway 
  MyIG:
    Type: AWS::EC2::InternetGateway
    DependsOn: MyVPC
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-IG"]]
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyIG
#Subnets 
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ] # Get the first AZ in the list 
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Condition: BuildPublic2
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]  
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-2
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateSubnets
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ] 
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivate2
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-2
#Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-Route-Table
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIG
#Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: BuildPrivateSubnets
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-Route-Table
  PrivateRoute:
    Type: AWS::EC2::Route
    Condition: BuildPrivateSubnets
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNAT
#Nat Gateway
  MyNAT:
    Type: AWS::EC2::NatGateway
    Condition: BuildPrivateSubnets
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-NAT"]]
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Condition: BuildPrivateSubnets
    Properties:
      Domain: MyVPC
#Attach route tables to subnets
  PublicSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPublic2
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateSubnets
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivate2
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
#Security Group
# WebSecurityGroup:
#   Type: AWS::EC2::SecurityGroup
#   Properties:
#     GroupDescription: Enable HTTP and SSH from 0.0.0.0/0
#     VpcId: !Ref MyVPC 
#     SecurityGroupIngress:
#       - IpProtocol: tcp
#         FromPort: 80
#         ToPort: 80
#         CidrIp: 0.0.0.0/0
#       - IpProtocol: tcp
#         FromPort: 22
#         ToPort: 22
#         CidrIp: 0.0.0.0/0      
#     Tags:
#       - Key: Name
#         Value: !Sub ${AWS::StackName}-SG

Outputs:
  VPCName:
    Value: !Ref MyVPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC
  # SecurityGroup:
  #   Value: !Ref WebSecurityGroup